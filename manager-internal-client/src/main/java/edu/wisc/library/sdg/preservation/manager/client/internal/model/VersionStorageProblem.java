/*
 * Preservation Manager Internal API
 * Internal API for the Preservation Manager.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package edu.wisc.library.sdg.preservation.manager.client.internal.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import edu.wisc.library.sdg.preservation.manager.client.internal.model.StorageProblemType;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VersionStorageProblem
 */
@JsonPropertyOrder({
  VersionStorageProblem.JSON_PROPERTY_PERSISTENCE_VERSION,
  VersionStorageProblem.JSON_PROPERTY_PROBLEM
})
@JsonTypeName("VersionStorageProblem")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class VersionStorageProblem {
  public static final String JSON_PROPERTY_PERSISTENCE_VERSION = "persistenceVersion";
  private String persistenceVersion;

  public static final String JSON_PROPERTY_PROBLEM = "problem";
  private StorageProblemType problem;

  public VersionStorageProblem() { 
  }

  public VersionStorageProblem persistenceVersion(String persistenceVersion) {
    
    this.persistenceVersion = persistenceVersion;
    return this;
  }

   /**
   * The version identifier of the object version
   * @return persistenceVersion
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "v2", required = true, value = "The version identifier of the object version")
  @JsonProperty(JSON_PROPERTY_PERSISTENCE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPersistenceVersion() {
    return persistenceVersion;
  }


  @JsonProperty(JSON_PROPERTY_PERSISTENCE_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPersistenceVersion(String persistenceVersion) {
    this.persistenceVersion = persistenceVersion;
  }


  public VersionStorageProblem problem(StorageProblemType problem) {
    
    this.problem = problem;
    return this;
  }

   /**
   * Get problem
   * @return problem
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_PROBLEM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StorageProblemType getProblem() {
    return problem;
  }


  @JsonProperty(JSON_PROPERTY_PROBLEM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProblem(StorageProblemType problem) {
    this.problem = problem;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionStorageProblem versionStorageProblem = (VersionStorageProblem) o;
    return Objects.equals(this.persistenceVersion, versionStorageProblem.persistenceVersion) &&
        Objects.equals(this.problem, versionStorageProblem.problem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(persistenceVersion, problem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionStorageProblem {\n");
    sb.append("    persistenceVersion: ").append(toIndentedString(persistenceVersion)).append("\n");
    sb.append("    problem: ").append(toIndentedString(problem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

