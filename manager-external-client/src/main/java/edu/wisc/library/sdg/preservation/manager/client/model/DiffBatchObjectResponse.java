/*
 * Preservation Manager Public API
 * Public API for the Preservation Manager.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package edu.wisc.library.sdg.preservation.manager.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import edu.wisc.library.sdg.preservation.manager.client.model.FileDiff;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DiffBatchObjectResponse
 */
@JsonPropertyOrder({
  DiffBatchObjectResponse.JSON_PROPERTY_HAS_CHANGES,
  DiffBatchObjectResponse.JSON_PROPERTY_FILES
})
@JsonTypeName("DiffBatchObjectResponse")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class DiffBatchObjectResponse {
  public static final String JSON_PROPERTY_HAS_CHANGES = "hasChanges";
  private Boolean hasChanges;

  public static final String JSON_PROPERTY_FILES = "files";
  private List<FileDiff> files = null;

  public DiffBatchObjectResponse() { 
  }

  public DiffBatchObjectResponse hasChanges(Boolean hasChanges) {
    
    this.hasChanges = hasChanges;
    return this;
  }

   /**
   * Indicates if the object contains any file changes from what was previously preserved
   * @return hasChanges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Indicates if the object contains any file changes from what was previously preserved")
  @JsonProperty(JSON_PROPERTY_HAS_CHANGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasChanges() {
    return hasChanges;
  }


  @JsonProperty(JSON_PROPERTY_HAS_CHANGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasChanges(Boolean hasChanges) {
    this.hasChanges = hasChanges;
  }


  public DiffBatchObjectResponse files(List<FileDiff> files) {
    
    this.files = files;
    return this;
  }

  public DiffBatchObjectResponse addFilesItem(FileDiff filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * List of files diffed
   * @return files
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of files diffed")
  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FileDiff> getFiles() {
    return files;
  }


  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiles(List<FileDiff> files) {
    this.files = files;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DiffBatchObjectResponse diffBatchObjectResponse = (DiffBatchObjectResponse) o;
    return Objects.equals(this.hasChanges, diffBatchObjectResponse.hasChanges) &&
        Objects.equals(this.files, diffBatchObjectResponse.files);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasChanges, files);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DiffBatchObjectResponse {\n");
    sb.append("    hasChanges: ").append(toIndentedString(hasChanges)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

